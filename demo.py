#!/usr/bin/env python3
"""
Example usage of the Content & Research Agent

This script demonstrates the complete workflow of the agent:
1. Research a topic using multiple AI services
2. Create content drafts
3. Generate media (speech and video)
4. Organize everything in Notion
"""

import os
import sys
from pathlib import Path

# Add the current directory to Python path for imports
sys.path.insert(0, str(Path(__file__).parent))

from content_research_agent import ContentResearchAgent


def demo_research_workflow():
    """Demonstrate the research workflow."""
    print("=" * 60)
    print("🔍 CONTENT & RESEARCH AGENT DEMO")
    print("=" * 60)
    
    # Initialize the agent
    agent = ContentResearchAgent()
    
    # Example topics for research
    topics = [
        "sustainable energy technologies 2024",
        "quantum computing breakthroughs",
        "AI ethics in healthcare"
    ]
    
    for i, topic in enumerate(topics, 1):
        print(f"\n📚 Example {i}: Researching '{topic}'")
        print("-" * 40)
        
        # Step 1: Research the topic
        print("🔍 Starting research...")
        research_result = agent.research_topic(topic)
        
        print(f"✅ Research completed!")
        print(f"📊 Sources queried: {len(research_result['research_results'])}")
        print(f"📝 Summary preview: {research_result['summary'][:150]}...")
        
        if research_result.get('notion_url'):
            print(f"📋 Stored in Notion: {research_result['notion_url']}")
        
        # Step 2: Create content draft
        print("\n✍️ Creating content draft...")
        draft = agent.create_content_draft(topic, "article")
        
        if draft:
            print(f"✅ Content draft created!")
            print(f"📝 Title: {draft.title}")
            print(f"📏 Content length: {len(draft.content)} characters")
            print(f"📚 Based on {len(draft.source_material)} research sources")
            print(f"🤖 Generated by: {draft.author_agent}")
            print(f"📄 Preview: {draft.content[:200]}...")
        else:
            print("❌ Failed to create content draft")
            continue
        
        # Step 3: Generate speech (demo)
        print("\n🎤 Generating speech preview...")
        speech_result = agent.generate_speech(draft.content[:300])  # First 300 chars
        print(f"🎵 Speech file: {speech_result['audio_path']}")
        print(f"⏱️ Estimated duration: {speech_result['duration']:.1f} seconds")
        
        # Step 4: Generate video (demo)
        print("\n🎬 Generating video preview...")
        video_result = agent.generate_video(draft.content[:200])  # First 200 chars as script
        print(f"📹 Video file: {video_result['video_path']}")
        print(f"⏱️ Estimated duration: {video_result['duration']:.1f} seconds")
        
        print(f"\n✨ Workflow completed for: {topic}")
        
        if i < len(topics):
            print("\n" + "=" * 40)


def demo_cli_usage():
    """Demonstrate CLI usage examples."""
    print("\n" + "=" * 60)
    print("💻 CLI USAGE EXAMPLES")
    print("=" * 60)
    
    examples = [
        {
            "description": "Research a topic",
            "command": "python cli.py research 'machine learning applications'"
        },
        {
            "description": "Create content draft",
            "command": "python cli.py create 'machine learning applications' --type article"
        },
        {
            "description": "Generate speech",
            "command": "python cli.py speech 'Hello, this is a test of text-to-speech generation'"
        },
        {
            "description": "Generate video",
            "command": "python cli.py video 'Welcome to our AI presentation'"
        },
        {
            "description": "Complete workflow",
            "command": "python cli.py workflow 'blockchain technology' --include-speech --include-video"
        },
        {
            "description": "Check agent status",
            "command": "python cli.py status"
        }
    ]
    
    for i, example in enumerate(examples, 1):
        print(f"\n{i}. {example['description']}:")
        print(f"   {example['command']}")


def demo_configuration():
    """Show configuration examples."""
    print("\n" + "=" * 60)
    print("⚙️ CONFIGURATION EXAMPLES")
    print("=" * 60)
    
    print("\n📋 Required Environment Variables:")
    env_vars = [
        "OPENAI_API_KEY",
        "ANTHROPIC_API_KEY",
        "GOOGLE_API_KEY",
        "PERPLEXITY_API_KEY",
        "ELEVENLABS_API_KEY",
        "SYNTHESIA_API_KEY",
        "NOTION_TOKEN"
    ]
    
    for var in env_vars:
        status = "✅ Set" if os.getenv(var) else "❌ Missing"
        print(f"  {var}: {status}")
    
    print("\n📝 To set up configuration:")
    print("1. Copy .env.example to .env")
    print("2. Fill in your API keys")
    print("3. Customize config.yaml if needed")
    print("4. Run 'python cli.py status' to verify setup")


def demo_quality_assurance():
    """Demonstrate quality assurance features."""
    print("\n" + "=" * 60)
    print("🛡️ QUALITY ASSURANCE FEATURES")
    print("=" * 60)
    
    print("\n✅ Built-in Quality Checks:")
    print("• Citation validation - All facts must be properly cited")
    print("• Source verification - Multiple sources are cross-referenced")
    print("• Duplicate detection - Prevents repetitive content")
    print("• Fact checking - Validates information accuracy")
    print("• Tu orchestrator integration - External validation system")
    
    print("\n📊 Quality Standards:")
    print("• Always cite facts")
    print("• Avoid repetition in content")
    print("• Validate all sources")
    print("• Spot-check with Tu orchestrator")


def main():
    """Main demo function."""
    print("🚀 Welcome to the Content & Research Agent Demo!")
    print("\nThis demo will show you:")
    print("1. Research workflow with multiple AI services")
    print("2. Content creation and media generation")
    print("3. CLI usage examples")
    print("4. Configuration requirements")
    print("5. Quality assurance features")
    
    input("\nPress Enter to start the demo...")
    
    try:
        # Run demo workflows
        demo_research_workflow()
        demo_cli_usage()
        demo_configuration()
        demo_quality_assurance()
        
        print("\n" + "=" * 60)
        print("🎉 DEMO COMPLETED!")
        print("=" * 60)
        print("\n📚 Next Steps:")
        print("1. Set up your API keys in .env file")
        print("2. Run 'python cli.py status' to verify configuration")
        print("3. Try 'python cli.py research \"your topic\"' to start")
        print("4. Explore the README_AGENT.md for detailed documentation")
        print("\n💡 Tip: Start with the CLI commands for easier usage!")
        
    except Exception as e:
        print(f"\n❌ Demo error: {e}")
        print("This is normal if API keys are not configured yet.")
        print("Please set up your configuration and try again.")


if __name__ == "__main__":
    main()